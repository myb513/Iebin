doctype html
html(lang="en")
    head

        meta(charset="UTF-8")
        meta(http-equiv='Pragma', content='no-cache')
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        //- meta(name="google-signin-client_id", content="832440413694-15midan99opv19j7nrocr79dndcnplg8.apps.googleusercontent.com")
        link(rel="stylesheet", href="https://use.fontawesome.com/releases/v5.15.4/css/all.css", integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm", crossorigin="anonymous")
        //- link(rel="stylesheet", href="https://unpkg.com/mvp.css")
        link(rel="stylesheet", href="./public/css/style.css")
        title Comma
    body 
        
        header
            h1 COM'MA
        main
              

            div#welcome 
                form
                    input#roomName(type="text", required, placeholder="Room Name")
                    input#nickname(type="text", required, placeholder="Your Nickname")
                    button Enter Room
                    div#mylogin(class ="g-signin2" data-onsuccess="onSignIn")  
                    button#authorize_button(onclick='handleAuthClick()') Sign in
                    button#signout_button(onclick='handleSignoutClick()') Sign Out
                    pre#content(style='white-space: pre-wrap;').
            div#call(class="call")
                div#streamBox
                    div#streams
                        div#myStream(class="people1")
                            video#myFace(autoplay, playsinline, width="500", height="400")
                            h3#userNickname  
                    div#chatRoom
                        ul#chatBox
                        form#chatForm
                            input(required, type="text", placeholder="Write your chat")
                            button Send
                    div#controlers2
                        div#controlers2__column
                            select#languages
                                option(value = "1", selected) KOR to ENG
                                option(value = "2") KOR to KOR
                                option(value = "3") ENG to KOR
                                option(value = "4") ENG to ENR
                        div#controlers2__column
                            div#buttons
                            div#buttons    
                            div#buttons
                            button#startSpeech Speech
                    div#controlers
                        div#controlers__column
                            select#cameras
                        div#controlers__column
                            div#buttons
                                button#mute
                                    i(class="fas fa-microphone fa-2x unMuteIcon")
                                    i(class="fas fa-microphone-slash fa-2x muteIcon")
                            div#buttons    
                                button#camera 
                                    i(class="fas fa-video fa-2x cameraIcon")
                                    i(class="fas fa-video-slash fa-2x unCameraIcon")
                            div#buttons
                            button#leave Leave
                    
                     

                    
        aside.modal.hidden
            div.modal__box
                h2.modal__text
                button.modal__btn OK

        script(type='text/javascript').
            /* exported gapiLoaded */
            /* exported gisLoaded */
            /* exported handleAuthClick */
            /* exported handleSignoutClick */
            // TODO(developer): Set to client ID and API key from the Developer Console
            const CLIENT_ID = '832440413694-15midan99opv19j7nrocr79dndcnplg8.apps.googleusercontent.com';
            const API_KEY = 'AIzaSyC4geotSpdvbn0IgEoA1ObAOpe0eYKfXy4';
            // Discovery doc URL for APIs used by the quickstart
            const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/people/v1/rest';
            // Authorization scopes required by the API; multiple scopes can be
            // included, separated by spaces.
            const SCOPES = 'https://www.googleapis.com/auth/contacts.readonly';
            let tokenClient;
            let gapiInited = false;
            let gisInited = false;
            document.getElementById('authorize_button').style.visibility = 'hidden';
            document.getElementById('signout_button').style.visibility = 'hidden';
            /**
            * Callback after api.js is loaded.
            */
            function gapiLoaded() {
            gapi.load('client', initializeGapiClient);
            }
            /**
            * Callback after the API client is loaded. Loads the
            * discovery doc to initialize the API.
            */
            async function initializeGapiClient() {
            await gapi.client.init({
            apiKey: API_KEY,
            discoveryDocs: [DISCOVERY_DOC],
            });
            gapiInited = true;
            maybeEnableButtons();
            }
            /**
            * Callback after Google Identity Services are loaded.
            */
            function gisLoaded() {
            tokenClient = google.accounts.oauth2.initTokenClient({
            client_id: CLIENT_ID,
            scope: SCOPES,
            callback: '', // defined later
            });
            gisInited = true;
            maybeEnableButtons();
            }
            /**
            * Enables user interaction after all libraries are loaded.
            */
            function maybeEnableButtons() {
            if (gapiInited && gisInited) {
            document.getElementById('authorize_button').style.visibility = 'visible';
            }
            }
            /**
            *  Sign in the user upon button click.
            */
            function handleAuthClick() {
            tokenClient.callback = async (resp) => {
            if (resp.error !== undefined) {
            throw (resp);
            }
            document.getElementById('signout_button').style.visibility = 'visible';
            document.getElementById('authorize_button').innerText = 'Refresh';
            await listConnectionNames();
            };
            if (gapi.client.getToken() === null) {
            // Prompt the user to select a Google Account and ask for consent to share their data
            // when establishing a new session.
            tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
            // Skip display of account chooser and consent dialog for an existing session.
            tokenClient.requestAccessToken({prompt: ''});
            }
            }
            /**
            *  Sign out the user upon button click.
            */
            function handleSignoutClick() {
            const token = gapi.client.getToken();
            if (token !== null) {
            google.accounts.oauth2.revoke(token.access_token);
            gapi.client.setToken('');
            document.getElementById('content').innerText = '';
            document.getElementById('authorize_button').innerText = 'Authorize';
            document.getElementById('signout_button').style.visibility = 'hidden';
            }
            }
            /**
            * Print the display name if available for 10 connections.
            */
            async function listConnectionNames() {
            let response;
            try {
            // Fetch first 10 files
            response = await gapi.client.people.people.connections.list({
            'resourceName': 'people/me',
            'pageSize': 10,
            'personFields': 'names,emailAddresses',
            });
            } catch (err) {
            document.getElementById('content').innerText = err.message;
            return;
            }
            const connections = response.result.connections;
            if (!connections || connections.length == 0) {
            document.getElementById('content').innerText = 'No connections found.';
            return;
            }
            // Flatten to string to display
            const output = connections.reduce(
            (str, person) => {
            if (!person.names || person.names.length === 0) {
            return `${str}Missing display name\\n`;
            }
            return `${str}${person.names[0].displayName}\\n`;
            },
            'Connections:\\n');
            document.getElementById('content').innerText = output;
            }
        script(async='' defer='' src='https://apis.google.com/js/api.js' onload='gapiLoaded()')
        script(async='' defer='' src='https://accounts.google.com/gsi/client' onload='gisLoaded()')
        script(src="/socket.io/socket.io.js")
        script(src="https://apis.google.com/js/platform.js" async defer)
        script(src="/public/js/bundle.js")